What if we want to pass a function as a parameter? How does C# handles the callback functions or event handler? The answer is - delegate.

There are three steps involved while working with delegates:

1.Declare a delegate
2.Create an instance and reference a method
3.Invoke a delegate

A delegate can be declared using the delegate keyword followed by a function signature, as shown below.

Delegate Syntax
[access modifier] delegate [return type] [delegate name]([parameters])

A delegate can be declared outside of the class or inside the class. Practically, it should be declared out of the class.

Example: Set Delegate TargetCopy
public delegate void MyDelegate(string msg); // declare a delegate

// set target method
MyDelegate del = new MyDelegate(MethodA);
// or 
MyDelegate del = MethodA; 
// or set lambda expression 
MyDelegate del = (string msg) =>  Console.WriteLine(msg);

// target method
static void MethodA(string message)
{
    Console.WriteLine(message);
}

After setting a target method, a delegate can be invoked using the Invoke() method or using the () operator.

Example: Invoke a DelegateCopy
del.Invoke("Hello World!");
// or 
del("Hello World!");
-------------------------------------------
Delegate is also used to declare an Event and an Anonymous Method.
